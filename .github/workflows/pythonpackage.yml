# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: python-package

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  DISABLE_SSL: true
  SECRET_KEY: s3cr3t
  PG_PASSWORD: postgres

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry

      # Permissions issue when re-running jobs - https://github.com/actions/cache/issues/208
      - name: Cache dependencies
        uses: actions/cache@master
        id: cache-poetry
        env:
          cache-name: cache-poetry
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install

  pytest:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ["3.9"]

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 30s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@master
        env:
          cache-name: cache-poetry
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
      - run: |
          poetry run pytest --cache-clear

  black:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@master
        env:
          cache-name: cache-poetry
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('poetry.lock') }}
      - run: |
          poetry install

  isort:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@master
        env:
          cache-name: cache-poetry
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('poetry.lock') }}
      - run: |
          poetry run isort --check-only graphene_djmoney tests test_app

  flake8:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@master
        env:
          cache-name: cache-poetry
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('poetry.lock') }}
      - run: |
          poetry run flake8 graphene_djmoney/ tests/ test_app/

  python-security-check:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@master
        env:
          cache-name: cache-poetry
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('poetry.lock') }}
      - run: |
          poetry run safety check -i 51457
          poetry run bandit -r graphene_djmoney/ test_app/
